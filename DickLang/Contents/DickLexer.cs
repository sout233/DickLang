//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/sout/source/repos/DickLang/DickLang/Contents/Dick.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DickLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, CONST=31, 
		IF=32, WHILE=33, INTEGER=34, FLOAT=35, STRING=36, BOOL=37, NULL=38, WHITESPACE=39, 
		IDENTIFIER=40, LINE_COMMENT=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "CONST", "IF", "WHILE", "INTEGER", 
		"FLOAT", "STRING", "BOOL", "NULL", "WHITESPACE", "IDENTIFIER", "LINE_COMMENT"
	};


	public DickLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DickLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'dick'", "':'", "'='", "':='", "','", "'int'", "'str'", 
		"'bool'", "'float'", "'else'", "'fuck'", "'('", "')'", "'!'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", 
		"'||'", "'{'", "'}'", "'nig'", "'if'", null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "CONST", "IF", "WHILE", "INTEGER", 
		"FLOAT", "STRING", "BOOL", "NULL", "WHITESPACE", "IDENTIFIER", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dick.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DickLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
		27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,189,8,32,1,33,
		4,33,192,8,33,11,33,12,33,193,1,34,5,34,197,8,34,10,34,12,34,200,9,34,
		1,34,1,34,4,34,204,8,34,11,34,12,34,205,1,35,1,35,5,35,210,8,35,10,35,
		12,35,213,9,35,1,35,1,35,1,35,5,35,218,8,35,10,35,12,35,221,9,35,1,35,
		3,35,224,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,235,8,
		36,1,37,1,37,1,37,1,37,1,37,1,38,4,38,243,8,38,11,38,12,38,244,1,38,1,
		38,1,39,1,39,5,39,251,8,39,10,39,12,39,254,9,39,1,40,1,40,1,40,1,40,5,
		40,260,8,40,10,40,12,40,263,9,40,1,40,1,40,0,0,41,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,1,
		0,7,1,0,48,57,1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,3,0,65,90,95,95,
		97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,276,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,90,1,0,0,0,7,92,1,0,0,0,9,94,
		1,0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,103,1,0,0,0,17,107,1,0,0,0,19,112,
		1,0,0,0,21,118,1,0,0,0,23,123,1,0,0,0,25,128,1,0,0,0,27,130,1,0,0,0,29,
		132,1,0,0,0,31,134,1,0,0,0,33,136,1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,
		0,39,142,1,0,0,0,41,144,1,0,0,0,43,147,1,0,0,0,45,150,1,0,0,0,47,152,1,
		0,0,0,49,154,1,0,0,0,51,157,1,0,0,0,53,160,1,0,0,0,55,163,1,0,0,0,57,166,
		1,0,0,0,59,168,1,0,0,0,61,170,1,0,0,0,63,174,1,0,0,0,65,188,1,0,0,0,67,
		191,1,0,0,0,69,198,1,0,0,0,71,223,1,0,0,0,73,234,1,0,0,0,75,236,1,0,0,
		0,77,242,1,0,0,0,79,248,1,0,0,0,81,255,1,0,0,0,83,84,5,59,0,0,84,2,1,0,
		0,0,85,86,5,100,0,0,86,87,5,105,0,0,87,88,5,99,0,0,88,89,5,107,0,0,89,
		4,1,0,0,0,90,91,5,58,0,0,91,6,1,0,0,0,92,93,5,61,0,0,93,8,1,0,0,0,94,95,
		5,58,0,0,95,96,5,61,0,0,96,10,1,0,0,0,97,98,5,44,0,0,98,12,1,0,0,0,99,
		100,5,105,0,0,100,101,5,110,0,0,101,102,5,116,0,0,102,14,1,0,0,0,103,104,
		5,115,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,16,1,0,0,0,107,108,5,
		98,0,0,108,109,5,111,0,0,109,110,5,111,0,0,110,111,5,108,0,0,111,18,1,
		0,0,0,112,113,5,102,0,0,113,114,5,108,0,0,114,115,5,111,0,0,115,116,5,
		97,0,0,116,117,5,116,0,0,117,20,1,0,0,0,118,119,5,101,0,0,119,120,5,108,
		0,0,120,121,5,115,0,0,121,122,5,101,0,0,122,22,1,0,0,0,123,124,5,102,0,
		0,124,125,5,117,0,0,125,126,5,99,0,0,126,127,5,107,0,0,127,24,1,0,0,0,
		128,129,5,40,0,0,129,26,1,0,0,0,130,131,5,41,0,0,131,28,1,0,0,0,132,133,
		5,33,0,0,133,30,1,0,0,0,134,135,5,42,0,0,135,32,1,0,0,0,136,137,5,47,0,
		0,137,34,1,0,0,0,138,139,5,37,0,0,139,36,1,0,0,0,140,141,5,43,0,0,141,
		38,1,0,0,0,142,143,5,45,0,0,143,40,1,0,0,0,144,145,5,61,0,0,145,146,5,
		61,0,0,146,42,1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,44,1,0,0,0,
		150,151,5,60,0,0,151,46,1,0,0,0,152,153,5,62,0,0,153,48,1,0,0,0,154,155,
		5,60,0,0,155,156,5,61,0,0,156,50,1,0,0,0,157,158,5,62,0,0,158,159,5,61,
		0,0,159,52,1,0,0,0,160,161,5,38,0,0,161,162,5,38,0,0,162,54,1,0,0,0,163,
		164,5,124,0,0,164,165,5,124,0,0,165,56,1,0,0,0,166,167,5,123,0,0,167,58,
		1,0,0,0,168,169,5,125,0,0,169,60,1,0,0,0,170,171,5,110,0,0,171,172,5,105,
		0,0,172,173,5,103,0,0,173,62,1,0,0,0,174,175,5,105,0,0,175,176,5,102,0,
		0,176,64,1,0,0,0,177,178,5,100,0,0,178,179,5,111,0,0,179,180,5,108,0,0,
		180,181,5,111,0,0,181,182,5,118,0,0,182,189,5,101,0,0,183,184,5,117,0,
		0,184,185,5,110,0,0,185,186,5,116,0,0,186,187,5,105,0,0,187,189,5,108,
		0,0,188,177,1,0,0,0,188,183,1,0,0,0,189,66,1,0,0,0,190,192,7,0,0,0,191,
		190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,68,1,0,
		0,0,195,197,7,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
		199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,203,5,46,0,0,202,204,7,
		0,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
		206,70,1,0,0,0,207,211,5,34,0,0,208,210,8,1,0,0,209,208,1,0,0,0,210,213,
		1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,
		0,214,224,5,34,0,0,215,219,5,39,0,0,216,218,8,2,0,0,217,216,1,0,0,0,218,
		221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,
		0,0,0,222,224,5,39,0,0,223,207,1,0,0,0,223,215,1,0,0,0,224,72,1,0,0,0,
		225,226,5,116,0,0,226,227,5,114,0,0,227,228,5,117,0,0,228,235,5,101,0,
		0,229,230,5,102,0,0,230,231,5,97,0,0,231,232,5,108,0,0,232,233,5,115,0,
		0,233,235,5,101,0,0,234,225,1,0,0,0,234,229,1,0,0,0,235,74,1,0,0,0,236,
		237,5,110,0,0,237,238,5,117,0,0,238,239,5,108,0,0,239,240,5,108,0,0,240,
		76,1,0,0,0,241,243,7,3,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,
		0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,6,38,0,0,247,78,1,0,0,0,248,
		252,7,4,0,0,249,251,7,5,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,
		0,0,0,252,253,1,0,0,0,253,80,1,0,0,0,254,252,1,0,0,0,255,256,5,47,0,0,
		256,257,5,47,0,0,257,261,1,0,0,0,258,260,8,6,0,0,259,258,1,0,0,0,260,263,
		1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,
		0,264,265,6,40,0,0,265,82,1,0,0,0,12,0,188,193,198,205,211,219,223,234,
		244,252,261,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
